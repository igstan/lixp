<program>
  <!-- The famous Y combinator Lixp style! -->
  <def name="Y">
    <params><param name="h"/></params>
    <call>
      <def>
        <params><param name="f"/></params>
        <call><fn><ref id="f"/></fn><arg><ref id="f"/></arg></call>
      </def>
      <arg>
        <def>
          <params><param name="f"/></params>
          <call>
            <fn><ref id="h"/></fn>
            <arg>
              <def>
                <params><param name="n"/></params>
                <call>
                  <fn><call><fn><ref id="f"/></fn><arg><ref id="f"/></arg></call></fn>
                  <arg><ref id="n"/></arg>
                </call>
              </def>
            </arg>
          </call>
        </def>
      </arg>
    </call>
  </def>

  <!-- Factorial implemented using recursion via Y combinator -->
  <def name="factorial">
    <call>
      <fn><ref id="Y"/></fn>
      <arg>
        <def>
          <params><param name="factorial"/></params>
          <def>
            <params><param name="n"/></params>
            <if>
              <ref id="n"/>
              <call>
                <fn><ref id="*"/></fn><arg><ref id="n"/></arg>
                <arg>
                  <call>
                    <fn><ref id="factorial"/></fn>
                    <arg>
                      <call>
                        <fn><ref id="-"/></fn>
                        <arg><ref id="n"/></arg>
                        <arg><lit type="int">1</lit></arg>
                      </call>
                    </arg>
                  </call>
                </arg>
              </call>
              <lit type="int">1</lit>
            </if>
          </def>
        </def>
      </arg>
    </call>
  </def>

  <call>
    <fn><ref id="factorial"/></fn>
    <arg><lit type="int">5</lit></arg>
  </call>
</program>
